# Default values for devops_prova.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: marconealcantara/database
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

extraEnv:
  - name: POSTGRES_USER
    value: "root"
  - name: POSTGRES_PASSWORD
    value: "secret"
  - name: POSTGRES_DB
    value: "db_prova"
  - name: TZ
    value: "America/Sao_Paulo"

mySecret:
  enabled: false
  password: secret

command: []

configmap:
  enabled: true

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 5432

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

 #This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
 #-- Health check on creation pod
readinessProbe:
  #command postgress health check
  exec:
    command:
      - pg_isready
      - -U
      - root
      - -d
      - db_prova
  # -- Port of health check of application
  #tcpSocket:
  #  port: 5432
  # -- Number of seconds after the container has started before readiness
  initialDelaySeconds: 5
  # -- Specifies that the kubelet should perform a liveness probe every N seconds
  periodSeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 5
  # -- Minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  # -- When a probe fails, Kubernetes will try failureThreshold times before giving up.
  # Giving up in case of liveness probe means restarting the container.
  # In case of readiness probe the Pod will be marked Unready
  failureThreshold: 3

# -- Healh check continuos
livenessProbe:
  #command postgress health check
  exec:
    command:
      - pg_isready
      - -U
      - root
      - -d
      - db_prova
  # -- Port of health check of application
  #tcpSocket:
  #  port: 5432
  # -- Number of seconds after the container has started before liveness
  initialDelaySeconds: 5
  # -- Specifies that the kubelet should perform a liveness probe every N seconds
  periodSeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 5
  # -- Minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  # -- When a probe fails, Kubernetes will try failureThreshold times before giving up.
  # Giving up in case of liveness probe means restarting the container.
  # In case of readiness probe the Pod will be marked Unready
  failureThreshold: 3

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 1 # alterar para 3
  maxReplicas: 6
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
#volumes:
# - name: devops-prova
#
## Additional volumeMounts on the output Deployment definition.
#volumeMounts:
# - name: devops-prova
#   mountPath: "/docker-entrypoint-initdb.d"
#   readOnly: true

volumes:
  - name: devops-prova
    configMap:
      name: devops-prova

volumeMounts:
  - name: devops-prova
    mountPath: /docker-entrypoint-initdb.d
    readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
